public void getLastCustomerVsamGlcv010(Dfhcommarea dfhcommarea) {
    CustomerControlRecord customerControlRecord = new CustomerControlRecord();

    CustomerKy2 customerKy2 = new CustomerKy2();
    CustomerRecord customerRecord = new CustomerRecord();
    customerControlRecord = new CustomerControlRecord();
    customerControlRecord.getCustomerControlKey().setCustomerControlSortcode(0);
    customerControlRecord.getCustomerControlKey().setCustomerControlNumber(9999999999L);
    try {
        byte[] record = customerControlRecord.getBytes();
        KeyedFile jdeclKeyedFile = new KeyedFile();
        jdeclKeyedFile.setName("CUSTOMER");
        KeyedFileBrowse jdeclKeyFileBrowse = jdeclKeyedFile.startBrowse(record, SearchType.EQUAL);
        jdeclKeyFileBrowse.end();
    } catch (CicsConditionException e) {
        throw e;
    }

    customerControlRecord = new CustomerControlRecord();
    if (this.getWsCicsResp() == StatusCodeHelper.SYSIDERR) {
        for (sysiderrRetry = 1; sysiderrRetry <= 100; sysiderrRetry++) {
            if (this.getWsCicsResp() == StatusCodeHelper.NORMAL) {
                break;
            }
            if (this.getWsCicsResp() != StatusCodeHelper.SYSIDERR) {
                try {
                    Thread.sleep(TimeUnit.SECONDS.toMillis(3));
                } catch (InterruptedException e) {
                    throw e;
                }
                customerControlRecord.readForUpdate();
            }
        }
    } else {
        if (this.getWsCicsResp() != StatusCodeHelper.NORMAL) {
            dfhcommarea.setCommSuccess('N');
            dfhcommarea.setCommFailCode('4');
            this.deqNamedCounter();
            this.getMeOutOfHere();
        }
    }

    customerControlRecord = new CustomerControlRecord();
    customerControlRecord.setLastCustomerNumber(customerControlRecord.getLastCustomerNumber() + 1);
    try {
        byte[] record = customerControlRecord.getBytes();
        KSDS jdeclKsds = new KSDS();
        jdeclKsds.setName("CUSTOMER");
        jdeclKsds.rewrite(record);
    } catch (Exception e) {
        throw e;
    }

    customerControlRecord = new CustomerControlRecord();
    if (this.getWsCicsResp() == StatusCodeHelper.SYSIDERR) {
        for (sysiderrRetry = 1; sysiderrRetry <= 100; sysiderrRetry++) {
            if (this.getWsCicsResp() == StatusCodeHelper.NORMAL) {
                break;
            }
            if (this.getWsCicsResp() != StatusCodeHelper.SYSIDERR) {
                try {
                    Thread.sleep(TimeUnit.SECONDS.toMillis(3));
                } catch (InterruptedException e) {
                    throw e;
                }
                try {
                    customerFile.rewrite(customerControlRecord.getBytes());
                } catch (CicsConditionException e) {
                    throw e;
                }
            }
        }
    } else {
        if (this.getWsCicsResp() != StatusCodeHelper.NORMAL) {
            dfhcommarea.setCommSuccess('N');
            dfhcommarea.setCommFailCode('4');
            this.deqNamedCounter();
            this.getMeOutOfHere();
        }
    }

    dfhcommarea.setCommNumber(customerControlRecord.getLastCustomerNumber());
    customerKy2.setRequiredCustNumber2(customerControlRecord.getLastCustomerNumber());
    this.setNcsCustNoValue(customerControlRecord.getLastCustomerNumber());

}
